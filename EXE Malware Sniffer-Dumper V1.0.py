import os
import tkinter as tk
from tkinter import filedialog
import zipfile
import re
from PIL import Image, ImageTk

capture_counter = 0
capture_directory = None
selected_file = None
txt_file_path = None
file_paths_to_include = None
capture_folder_name = None

script_directory = os.path.dirname(os.path.abspath(__file__ ))

icon_path = "logo.ico"

def browse_file():
    global selected_file
    file_path = filedialog.askopenfilename(filetypes=[("Executable Files", "*.exe")])
    if file_path:
        result_Application_text.delete(1.0, tk.END)
        result_Application_text.insert(tk.END, "File selected: ", "red_text")
        result_Application_text.insert(tk.END, file_path, "black_text")

        result_Application_text.tag_configure("red_text", foreground="red")
        result_Application_text.tag_configure("black_text", foreground="black")
        cyber_capture_dir.config(state="active")
        selected_file = file_path

def open_cyber_capture():
    file_path = filedialog.askopenfilename(filetypes=[("Text Files", "*.txt")])
    if file_path:
        detected_patterns = read_virus_patterns(file_path)
        if detected_patterns:
            cyber_capture_text.delete(1.0, tk.END)
            cyber_capture_text.insert(tk.END, "Detected Patterns:\n", "red_text")
            cyber_capture_text.insert(tk.END, f"{', '.join(detected_patterns)}", "black_text")
            cyber_capture_text.tag_configure("red_text", foreground="red")
            cyber_capture_text.tag_configure("black_text", foreground="black")

def caesar_cipher(text, shift):
    encrypted_text = ""
    for char in text:
        if char.isalpha():
            if char.islower():
                encrypted_text += chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))
            elif char.isupper():
                encrypted_text += chr(((ord(char) - ord('A') + shift) % 26) + ord('A'))
        else:
            encrypted_text += char
    return encrypted_text

def create_cyber_capture_folder():
    global capture_counter, capture_directory, txt_file_path, capture_folder_name, file_paths_to_include
    capture_counter += 1
    capture_folder_name = f"Cyber Capture ID {str(capture_counter).zfill(4)}"

    if capture_directory:
        browse_cyber_capture.config(state="active")
        extract_malware_scripting.config(state="active")
        capture_folder_path = os.path.join(capture_directory, capture_folder_name)
        os.makedirs(capture_folder_path)
        if selected_file:
            with open(selected_file, 'rb') as exe_file:
                exe_contents = exe_file.read()
                cyber_capture_text.insert(tk.END, "Scanned Target:\n", "red_text")
                cyber_capture_text.insert(tk.END, f"\n{selected_file}\n", "black_text")

                txt_file_path = os.path.join(capture_folder_path, "contents.txt")
                with open(txt_file_path, 'wb') as txt_file:
                    txt_file.write(exe_contents)

            virus_patterns = scan_file_for_viruses(txt_file_path)

            if virus_patterns:
                cyber_capture_text.insert(tk.END, "Possible Malware Archives Snuffled:\n", "red_text")
                cyber_capture_text.insert(tk.END, f"{', '.join(virus_patterns)}\n", "black_text")
                save_detected_patterns(capture_folder_path, virus_patterns)

                detected_patterns = read_virus_patterns(txt_file_path)
                if detected_patterns:
                    cyber_capture_text.insert(tk.END, "Possible Malware Detected:\n", "red_text")
                    cyber_capture_text.insert(tk.END, f"{', '.join(detected_patterns)}", "black_text")
                else:
                    cyber_capture_text.insert(tk.END, "No malware detected.\n", "red_text")

                cyber_capture_text.insert(tk.END, "\nSilent Scan Result:\n", "red_text")
                cyber_capture_text.insert(tk.END, f"Selected EXE archive successfully snuffled silently.\n", "black_text")

                extract_and_copy_files(selected_file, capture_folder_path)
                file_paths_to_include = [txt_file_path]
            else:
                cyber_capture_text.insert(tk.END, "\nNo viruses found in contents.txt.\n", "red_text")
        else:
            cyber_capture_text.insert(tk.END, "Please select an EXE file to capture.\n", "red_text")
    else:
        cyber_capture_text.insert(tk.END, "Please select a directory for performing a Cyber Capture.\n", "red_text")

    cyber_capture_text.tag_configure("red_text", foreground="red")
    cyber_capture_text.tag_configure("black_text", foreground="black")

def save_detected_patterns(capture_folder, detected_patterns):
    pattern_file_name = f"malicious_pattern ID {str(capture_counter).zfill(4)}.txt"
    patterns_file_path = os.path.join(capture_folder, pattern_file_name)
    with open(patterns_file_path, 'w') as patterns_file:
        patterns_file.write("Detected Patterns:\n")
        for pattern in detected_patterns:
            patterns_file.write(pattern + "\n")

def read_virus_patterns(file_path):
    try:
        with open(file_path, 'rb') as file:
            contents = file.read().decode('utf-8', errors='ignore')
            virus_patterns = re.findall(r'\.exe|\.dll|\.vbs|\.ps1|\.bat|\.doc|\.docx|\.pdf|\.html|\.htm|\.php|\.js|\.css|\.jar|\.zip|\.rar|\.inj', contents)
            return virus_patterns
    except Exception as e:
        return []

def scan_file_for_viruses(file_path):
    try:
        with open(file_path, 'rb') as file:
            contents = file.read().decode('utf-8', errors='ignore')
            virus_patterns = {
                r'\.exe',
                r'\.dll',
                r'\.vbs',
                r'\.ps1',
                r'\.bat',
                r'\.doc',
                r'\.docx',
                r'\.pdf',
                r'\.html',
                r'\.htm',
                r'\.php',
                r'\.js',
                r'\.css',
                r'\.jar',
                r'\.zip',
                r'\.rar',
                r'\.inj',
            }

            detected_patterns = {pattern for pattern in virus_patterns if re.search(pattern, contents)}
            return detected_patterns
    except Exception as e:
        return set()

def extract_and_copy_files(exe_path, capture_folder):
    try:
        with open(exe_path, 'rb') as exe_file:
            if exe_file.read(4) == b'MZP\x00':
                with zipfile.ZipFile(exe_path, 'r') as zip_file:
                    zip_file.extractall(capture_folder)
                    cyber_capture_text.insert(tk.END, "Files extracted and copied successfully.\n", "red_text")
            else:
                cyber_capture_text.insert(tk.END, "\nWARNING!!** Selected EXE is not an extractable archive.\n", "red_text", "\n")

            cyber_capture_text.tag_configure("red_text", foreground="red")
            cyber_capture_text.tag_configure("black_text", foreground="black")

    except Exception as e:
        cyber_capture_text.insert(tk.END, f"Error extracting files: {str(e)}\n", "red_text")
        cyber_capture_text.tag_configure("red_text", foreground="red")

def choose_cyber_capture_directory():
    global capture_directory
    directory_path = filedialog.askdirectory()
    if directory_path:
        capture_directory = directory_path
        cyber_capture_text_dir.delete(1.0, tk.END)
        cyber_capture_text_dir.insert(tk.END, "Cyber Capture directory selected: ", "red_text")
        cyber_capture_text_dir.insert(tk.END, capture_directory, "black_text")
        cyber_capture_text_dir.tag_configure("red_text", foreground="red")
        cyber_capture_text_dir.tag_configure("black_text", foreground="black")
        create_cyber_capture.config(state="active")

def dump_malware_scripting():
    global capture_directory, txt_file_path, file_paths_to_include
    if capture_directory and txt_file_path:
        selected_txt_file = os.path.join(capture_directory, capture_folder_name, "possible_malicious_scripting.txt")
        if selected_txt_file:
            with open(selected_file, 'rb') as exe_file:
                exe_contents = exe_file.read()
                with open(selected_txt_file, 'wb') as txt_file:
                    txt_file.write(exe_contents)
            cyber_capture_text.insert(tk.END, f"Possible Malicious binary scripting dumped to:", "red_text")
            cyber_capture_text.insert(tk.END, f"\n{selected_txt_file}\n", "black_text")
            malicious_script_contents_path = os.path.join(capture_directory, capture_folder_name, "possible_malicious_script_dir.txt")
            with open(malicious_script_contents_path, 'w', encoding='utf-8') as malicious_script_contents_file:
                malicious_script_contents_file.write("Possible Malicious Scripting Contents:\n")
                for file_path in file_paths_to_include:
                    with open(file_path, 'rb') as file:
                        contents = file.read().decode('utf-8', errors='ignore')
                        malicious_script_contents_file.write(f"\nFile: {file_path}\n")
                        malicious_script_contents_file.write(contents)
    else:
        cyber_capture_text.insert(tk.END, "Please perform a Cyber Capture before dumping malware.\n", "red_text")

root = tk.Tk()
root.iconbitmap(icon_path)
root.title("EXE Malware Sniffer/Dumper V1.0  -  Made By: Animal crackers")
root.geometry("900x700")
root.configure(bg="black")
root.resizable(False, False)

logo_image = Image.open(os.path.join(script_directory, "logo.png"))
logo_photo = ImageTk.PhotoImage(logo_image)

label = tk.Label(root, text="EXE Malware Sniffer/Dumper V1.0", fg="red", bg="black", font=("Courier New", 35))
label.pack(side="top")

extract_malware_scripting = tk.Button(root, text="Dump Binary Malware Scripting", state="disabled", command=dump_malware_scripting)
extract_malware_scripting.pack(padx=10, pady=10)
extract_malware_scripting.place(x=30, y=250)

create_cyber_capture = tk.Button(root, text="Start Cyber Capture", state="disabled", command=create_cyber_capture_folder)
create_cyber_capture.pack(padx=10, pady=10)
create_cyber_capture.place(x=570, y=220)

browse_cyber_capture = tk.Button(root, text="View Cyber Captures", state="active", command=open_cyber_capture)
browse_cyber_capture.pack(padx=10, pady=10)
browse_cyber_capture.place(x=751, y=220)

cyber_capture_dir = tk.Button(root, text="Cyber Capture Dir. ", state="disabled", command=choose_cyber_capture_directory)
cyber_capture_dir.pack(padx=10, pady=10)
cyber_capture_dir.place(x=15, y=150)

browse_button = tk.Button(root, text="Browse Application", command=browse_file)
browse_button.pack(padx=10, pady=10)
browse_button.place(x=15, y=80)

cyber_capture_text = tk.Text(root, wrap=tk.WORD, width=37, height=26, bg="white", fg="black")
cyber_capture_text.pack(expand=True, fill='both', padx=10, pady=10)
cyber_capture_text.place(x=570, y=260)

cyber_capture_text_dir = tk.Text(root, wrap=tk.WORD, width=90, height=1, bg="white", fg="black")
cyber_capture_text_dir.pack(expand=True, fill='both', padx=10, pady=10)
cyber_capture_text_dir.place(x=146, y=155)

result_Application_text = tk.Text(root, wrap=tk.WORD, width=90, height=1, bg="white", fg="black")
result_Application_text.pack(expand=True, fill='both', padx=10, pady=10)
result_Application_text.place(x=146, y=85)

logo_label = tk.Label(root, image=logo_photo)
logo_label.pack()
logo_label.place(x=30, y=293)

root.mainloop()